// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/go-iost/v3/db (interfaces: MVCCDB)

// Package db_mock is a generated GoMock package.
package db_mock

import (
	gomock "github.com/golang/mock/gomock"
	db "github.com/iost-official/go-iost/v3/db"
	reflect "reflect"
)

// MockMVCCDB is a mock of MVCCDB interface
type MockMVCCDB struct {
	ctrl     *gomock.Controller
	recorder *MockMVCCDBMockRecorder
}

// MockMVCCDBMockRecorder is the mock recorder for MockMVCCDB
type MockMVCCDBMockRecorder struct {
	mock *MockMVCCDB
}

// NewMockMVCCDB creates a new mock instance
func NewMockMVCCDB(ctrl *gomock.Controller) *MockMVCCDB {
	mock := &MockMVCCDB{ctrl: ctrl}
	mock.recorder = &MockMVCCDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMVCCDB) EXPECT() *MockMVCCDBMockRecorder {
	return m.recorder
}

// Checkout mocks base method
func (m *MockMVCCDB) Checkout(arg0 string) bool {
	ret := m.ctrl.Call(m, "Checkout", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Checkout indicates an expected call of Checkout
func (mr *MockMVCCDBMockRecorder) Checkout(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockMVCCDB)(nil).Checkout), arg0)
}

// Close mocks base method
func (m *MockMVCCDB) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockMVCCDBMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMVCCDB)(nil).Close))
}

// Commit mocks base method
func (m *MockMVCCDB) Commit(arg0 string) {
	m.ctrl.Call(m, "Commit", arg0)
}

// Commit indicates an expected call of Commit
func (mr *MockMVCCDBMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockMVCCDB)(nil).Commit), arg0)
}

// CurrentTag mocks base method
func (m *MockMVCCDB) CurrentTag() string {
	ret := m.ctrl.Call(m, "CurrentTag")
	ret0, _ := ret[0].(string)
	return ret0
}

// CurrentTag indicates an expected call of CurrentTag
func (mr *MockMVCCDBMockRecorder) CurrentTag() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTag", reflect.TypeOf((*MockMVCCDB)(nil).CurrentTag))
}

// Del mocks base method
func (m *MockMVCCDB) Del(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "Del", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockMVCCDBMockRecorder) Del(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockMVCCDB)(nil).Del), arg0, arg1)
}

// Flush mocks base method
func (m *MockMVCCDB) Flush(arg0 string) error {
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockMVCCDBMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockMVCCDB)(nil).Flush), arg0)
}

// Fork mocks base method
func (m *MockMVCCDB) Fork() db.MVCCDB {
	ret := m.ctrl.Call(m, "Fork")
	ret0, _ := ret[0].(db.MVCCDB)
	return ret0
}

// Fork indicates an expected call of Fork
func (mr *MockMVCCDBMockRecorder) Fork() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fork", reflect.TypeOf((*MockMVCCDB)(nil).Fork))
}

// Get mocks base method
func (m *MockMVCCDB) Get(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMVCCDBMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMVCCDB)(nil).Get), arg0, arg1)
}

// Has mocks base method
func (m *MockMVCCDB) Has(arg0, arg1 string) (bool, error) {
	ret := m.ctrl.Call(m, "Has", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has
func (mr *MockMVCCDBMockRecorder) Has(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockMVCCDB)(nil).Has), arg0, arg1)
}

// KeysByRange mocks base method
func (m *MockMVCCDB) KeysByRange(arg0, arg1, arg2 string, arg3 int) ([]string, error) {
	ret := m.ctrl.Call(m, "KeysByRange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeysByRange indicates an expected call of KeysByRange
func (mr *MockMVCCDBMockRecorder) KeysByRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeysByRange", reflect.TypeOf((*MockMVCCDB)(nil).KeysByRange), arg0, arg1, arg2, arg3)
}

// Put mocks base method
func (m *MockMVCCDB) Put(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockMVCCDBMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockMVCCDB)(nil).Put), arg0, arg1, arg2)
}

// Size mocks base method
func (m *MockMVCCDB) Size() (int64, error) {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size
func (mr *MockMVCCDBMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockMVCCDB)(nil).Size))
}
